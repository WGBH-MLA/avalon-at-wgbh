{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initializeSMDataPeaks = initializeSMDataPeaks;\nexports.initPeaks = initPeaks;\nexports.insertNewSegment = insertNewSegment;\nexports.deleteSegment = deleteSegment;\nexports.activateSegment = activateSegment;\nexports.revertSegment = revertSegment;\nexports.saveSegment = saveSegment;\nexports.updateSegment = updateSegment;\nexports.dragSegment = dragSegment;\nexports.insertTempSegment = insertTempSegment;\nexports.deleteTempSegment = deleteTempSegment;\n\nvar types = _interopRequireWildcard(require(\"./types\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _Utils = _interopRequireDefault(require(\"../api/Utils\"));\n\nvar _smData = require(\"./sm-data\");\n\nvar _forms = require(\"./forms\");\n\nvar _StructuralMetadataUtils = _interopRequireDefault(require(\"../services/StructuralMetadataUtils\"));\n\nvar apiUtils = new _Utils[\"default\"]();\nvar structuralMetadataUtils = new _StructuralMetadataUtils[\"default\"]();\n/**\n * Fetch structure.json and initialize Peaks\n * @param {String} baseURL - base URL of masterfile location\n * @param {String} masterFileID - ID of the masterfile relevant to media element\n * @param {JSON String} initStructure - structure with root element when empty\n * @param {Object} options - peaks options\n * @param {Boolean} isError - flag inidicating an error happened when fetching waveform.json\n */\n\nfunction initializeSMDataPeaks(baseURL, masterFileID, initStructure, options, duration, isError) {\n  return function (dispatch, getState) {\n    apiUtils.getRequest(baseURL, masterFileID, 'structure.json').then(function (response) {\n      var smData = [];\n\n      if ((0, _lodash.isEmpty)(response.data)) {\n        smData = structuralMetadataUtils.addUUIds([JSON.parse(initStructure)]);\n      } else {\n        smData = structuralMetadataUtils.addUUIds([response.data]);\n      } // Mark the top element as 'root'\n\n\n      structuralMetadataUtils.markRootElement(smData); // Initialize Redux state variable with structure\n\n      dispatch((0, _smData.buildSMUI)(smData, duration)); // Update redux-store flag for structure file retrieval\n\n      dispatch((0, _forms.retrieveStructureSuccess)());\n\n      if (!isError) {\n        dispatch(initPeaks(smData, options));\n\n        var _getState = getState(),\n            peaksInstance = _getState.peaksInstance; // Subscribe to Peaks event for dragging handles in a segment\n\n\n        if (peaksInstance.events !== undefined) {\n          peaksInstance.events.subscribe(function (segment) {\n            dispatch(dragSegment(segment, 1));\n          });\n        }\n      }\n    })[\"catch\"](function (error) {\n      console.log('TCL: Structure -> }catch -> error', error); // Check whether fetching waveform.json was successful\n\n      if (!isError) {\n        // Initialize Peaks when structure.json is not found to show an empty waveform\n        dispatch(initPeaks([], options));\n      }\n\n      var status = error.response !== undefined ? error.response.status : -2;\n      dispatch((0, _forms.handleStructureError)(1, status));\n    });\n  };\n}\n\nfunction initPeaks(smData, options) {\n  return {\n    type: types.INIT_PEAKS,\n    smData: smData,\n    options: options\n  };\n}\n\nfunction insertNewSegment(span) {\n  return {\n    type: types.INSERT_SEGMENT,\n    payload: span\n  };\n}\n\nfunction deleteSegment(item) {\n  return {\n    type: types.DELETE_SEGMENT,\n    payload: item\n  };\n}\n\nfunction activateSegment(id) {\n  return {\n    type: types.ACTIVATE_SEGMENT,\n    payload: id\n  };\n}\n\nfunction revertSegment(clone) {\n  return {\n    type: types.REVERT_SEGMENT,\n    payload: clone\n  };\n}\n\nfunction saveSegment(state) {\n  return {\n    type: types.SAVE_SEGMENT,\n    payload: state\n  };\n}\n\nfunction updateSegment(segment, state) {\n  return {\n    type: types.UPDATE_SEGMENT,\n    segment: segment,\n    state: state\n  };\n}\n\nfunction dragSegment(segment, flag) {\n  return {\n    type: types.IS_DRAGGING,\n    segment: segment,\n    flag: flag\n  };\n}\n\nfunction insertTempSegment() {\n  return {\n    type: types.TEMP_INSERT_SEGMENT\n  };\n}\n\nfunction deleteTempSegment(id) {\n  return {\n    type: types.TEMP_DELETE_SEGMENT,\n    payload: id\n  };\n}","map":null,"metadata":{},"sourceType":"module"}