{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar types = _interopRequireWildcard(require(\"../actions/types\"));\n\nvar _WaveformDataUtils = _interopRequireDefault(require(\"../services/WaveformDataUtils\"));\n\nvar _peaks = _interopRequireDefault(require(\"peaks.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar waveformUtils = new _WaveformDataUtils[\"default\"]();\nvar initialState = {\n  peaks: {},\n  events: null,\n  segment: null,\n  isDragging: false\n};\nvar newPeaks = null;\nvar updatedSegment = null;\n\nvar peaksInstance = function peaksInstance() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.INIT_PEAKS:\n      var segments = waveformUtils.initSegments(action.smData);\n\n      var _peaksInstance = _peaks[\"default\"].init((0, _objectSpread2[\"default\"])({}, action.options, {\n        segments: segments\n      }));\n\n      return {\n        peaks: _peaksInstance,\n        events: (0, _rxjs.fromEvent)(_peaksInstance, 'segments.dragged'),\n        segment: (0, _objectSpread2[\"default\"])({}, state.segment)\n      };\n\n    case types.INSERT_SEGMENT:\n      state.peaks.segments.add(waveformUtils.convertTimespanToSegment(action.payload));\n      newPeaks = waveformUtils.rebuildPeaks((0, _objectSpread2[\"default\"])({}, state.peaks));\n      return (0, _objectSpread2[\"default\"])({}, state, {\n        peaks: newPeaks\n      });\n\n    case types.DELETE_SEGMENT:\n      newPeaks = waveformUtils.deleteSegments(action.payload, (0, _objectSpread2[\"default\"])({}, state.peaks));\n      return (0, _objectSpread2[\"default\"])({}, state, {\n        peaks: waveformUtils.rebuildPeaks(newPeaks)\n      });\n\n    case types.ACTIVATE_SEGMENT:\n      newPeaks = waveformUtils.activateSegment(action.payload, (0, _objectSpread2[\"default\"])({}, state.peaks));\n      return (0, _objectSpread2[\"default\"])({}, state, {\n        peaks: newPeaks\n      });\n\n    case types.SAVE_SEGMENT:\n      newPeaks = waveformUtils.deactivateSegment(action.payload.clonedSegment.id, (0, _objectSpread2[\"default\"])({}, state.peaks));\n      var rebuiltPeaks = waveformUtils.saveSegment(action.payload, (0, _objectSpread2[\"default\"])({}, newPeaks));\n      return (0, _objectSpread2[\"default\"])({}, state, {\n        peaks: rebuiltPeaks\n      });\n\n    case types.REVERT_SEGMENT:\n      newPeaks = waveformUtils.deactivateSegment(action.payload.id, (0, _objectSpread2[\"default\"])({}, state.peaks));\n      return (0, _objectSpread2[\"default\"])({}, state, {\n        peaks: waveformUtils.revertSegment(action.payload, (0, _objectSpread2[\"default\"])({}, newPeaks))\n      });\n\n    case types.UPDATE_SEGMENT:\n      newPeaks = waveformUtils.updateSegment(action.segment, action.state, (0, _objectSpread2[\"default\"])({}, state.peaks));\n      updatedSegment = newPeaks.segments.getSegment(action.segment.id);\n      return (0, _objectSpread2[\"default\"])({}, state, {\n        peaks: (0, _objectSpread2[\"default\"])({}, newPeaks),\n        segment: updatedSegment\n      });\n\n    case types.IS_DRAGGING:\n      if (action.flag === 0) {\n        return (0, _objectSpread2[\"default\"])({}, state, {\n          segment: action.segment,\n          isDragging: false\n        });\n      }\n\n      if (action.flag === 1) {\n        return (0, _objectSpread2[\"default\"])({}, state, {\n          segment: action.segment,\n          isDragging: true\n        });\n      }\n\n    case types.TEMP_INSERT_SEGMENT:\n      newPeaks = waveformUtils.insertTempSegment((0, _objectSpread2[\"default\"])({}, state.peaks));\n      return (0, _objectSpread2[\"default\"])({}, state, {\n        peaks: (0, _objectSpread2[\"default\"])({}, newPeaks)\n      });\n\n    case types.TEMP_DELETE_SEGMENT:\n      state.peaks.segments.removeById(action.payload);\n      return (0, _objectSpread2[\"default\"])({}, state);\n\n    default:\n      return state;\n  }\n};\n\nvar _default = peaksInstance;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}