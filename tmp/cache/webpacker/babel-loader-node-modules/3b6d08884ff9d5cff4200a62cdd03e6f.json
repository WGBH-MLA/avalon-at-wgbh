{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _List = _interopRequireDefault(require(\"./List\"));\n\nvar _reactRedux = require(\"react-redux\");\n\nvar smActions = _interopRequireWildcard(require(\"../actions/sm-data\"));\n\nvar _peaksInstance = require(\"../actions/peaks-instance\");\n\nvar _forms = require(\"../actions/forms\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _Constants = require(\"../services/Constants\");\n\nvar _reactDnd = require(\"react-dnd\");\n\nvar _ListItemEditForm = _interopRequireDefault(require(\"./ListItemEditForm\"));\n\nvar _ListItemControls = _interopRequireDefault(require(\"./ListItemControls\"));\n\nvar spanSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      id: props.item.id\n    };\n  }\n};\nvar spanTarget = {\n  canDrop: function canDrop(props, monitor) {\n    // You can disallow drop based on props or item\n    return true;\n  }\n};\n\nfunction collectDrag(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging()\n  };\n}\n\nfunction collectDrop(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    // You can ask the monitor about the current drag state:\n    isOver: monitor.isOver(),\n    isOverCurrent: monitor.isOver({\n      shallow: true\n    }),\n    canDrop: monitor.canDrop(),\n    itemType: monitor.getItemType()\n  };\n}\n\nvar ListItem =\n/*#__PURE__*/\nfunction (_Component) {\n  (0, _inherits2[\"default\"])(ListItem, _Component);\n\n  function ListItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, ListItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3[\"default\"])(ListItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"state\", {\n      editing: false\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleDelete\", function () {\n      var item = _this.props.item;\n\n      _this.props.deleteItem(item.id);\n\n      _this.props.deleteSegment(item);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleEditClick\", function () {\n      // Disable the edit buttons of other list items\n      _this.props.handleEditingTimespans(1);\n\n      _this.setState({\n        editing: true\n      });\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleEditFormCancel\", function () {\n      _this.setState({\n        editing: false\n      }); // Enable the edit buttons of other list items\n\n\n      _this.props.handleEditingTimespans(0);\n    });\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"handleShowDropTargetsClick\", function () {\n      var _this$props = _this.props,\n          addDropTargets = _this$props.addDropTargets,\n          item = _this$props.item,\n          removeActiveDragSources = _this$props.removeActiveDragSources,\n          removeDropTargets = _this$props.removeDropTargets,\n          setActiveDragSource = _this$props.setActiveDragSource; // Disable other editing actions\n\n      _this.props.handleEditingTimespans(1); // Clear out any current drop targets\n\n\n      removeDropTargets(); // Handle closing of current drag source drop targets, and exit with a clean UI.\n\n      if (item.active === true) {\n        // Clear out any active drag sources\n        removeActiveDragSources(); // Enable other editing actions\n\n        _this.props.handleEditingTimespans(0);\n\n        return;\n      } // Clear out any active drag sources\n\n\n      removeActiveDragSources(); // Calculate possible drop targets\n\n      addDropTargets(item); // Redux way of setting active drag list item\n\n      setActiveDragSource(item.id);\n    });\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(ListItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          item = _this$props2.item,\n          begin = _this$props2.item.begin,\n          end = _this$props2.item.end,\n          items = _this$props2.item.items,\n          label = _this$props2.item.label,\n          type = _this$props2.item.type,\n          active = _this$props2.item.active,\n          connectDragSource = _this$props2.connectDragSource,\n          connectDropTarget = _this$props2.connectDropTarget;\n      var subMenu = items && items.length > 0 ? _react[\"default\"].createElement(_List[\"default\"], {\n        items: items\n      }) : null;\n      var itemProp = {\n        childrenCount: item.items ? item.items.length : 0,\n        label: item.label,\n        type: item.type,\n        active: item.active\n      };\n      return connectDragSource(connectDropTarget(_react[\"default\"].createElement(\"li\", {\n        className: active ? 'active' : ''\n      }, this.state.editing && _react[\"default\"].createElement(_ListItemEditForm[\"default\"], {\n        item: item,\n        handleEditFormCancel: this.handleEditFormCancel\n      }), !this.state.editing && _react[\"default\"].createElement(\"div\", {\n        className: \"row-wrapper\"\n      }, type === 'span' && _react[\"default\"].createElement(\"span\", {\n        className: \"structure-title\"\n      }, label, \" (\", begin, \" - \", end, \")\"), (type === 'div' || type === 'root') && _react[\"default\"].createElement(\"div\", {\n        className: \"structure-title heading\"\n      }, label), _react[\"default\"].createElement(_ListItemControls[\"default\"], {\n        handleDelete: this.handleDelete,\n        handleEditClick: this.handleEditClick,\n        item: itemProp,\n        handleShowDropTargetsClick: this.handleShowDropTargetsClick\n      })), subMenu)));\n    }\n  }]);\n  return ListItem;\n}(_react.Component);\n\n(0, _defineProperty2[\"default\"])(ListItem, \"propTypes\", {\n  item: _propTypes[\"default\"].shape({\n    active: _propTypes[\"default\"].bool,\n    begin: _propTypes[\"default\"].string,\n    end: _propTypes[\"default\"].string,\n    items: _propTypes[\"default\"].array,\n    id: _propTypes[\"default\"].string,\n    type: _propTypes[\"default\"].string,\n    editing: _propTypes[\"default\"].bool\n  })\n});\nvar mapDispatchToProps = {\n  deleteItem: smActions.deleteItem,\n  addDropTargets: smActions.addDropTargets,\n  removeDropTargets: smActions.removeDropTargets,\n  removeActiveDragSources: smActions.removeActiveDragSources,\n  setActiveDragSource: smActions.setActiveDragSource,\n  deleteSegment: _peaksInstance.deleteSegment,\n  handleEditingTimespans: _forms.handleEditingTimespans\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    smData: state.smData,\n    peaksInstance: state.peaksInstance.peaks\n  };\n};\n\nvar ConnectedDropTarget = (0, _reactDnd.DropTarget)(_Constants.ItemTypes.SPAN, spanTarget, collectDrop);\nvar ConnectedDragSource = (0, _reactDnd.DragSource)(_Constants.ItemTypes.SPAN, spanSource, collectDrag);\nvar DragConnected = ConnectedDropTarget(ConnectedDragSource(ListItem));\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(DragConnected);\n\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"module"}